#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#i https://aka.ms/skiasharp-eap/index.json
#r nuget:SkiaSharp,2.80.*-*

#!csharp

using SkiaSharp;

// create the bitmap that will hold the pixels
var bitmap = new SKBitmap(256, 256);

// create the canvas so that we can draw on that bitmap
var canvas = new SKCanvas(bitmap);

// clear the canvas, so that it is fresh
canvas.Clear(SKColors.Transparent);

var paint = new SKPaint {
    IsAntialias = true,                               // smooth text
    TextSize = 50,                                    // 50px high text
    TextAlign = SKTextAlign.Center,                   // center the text
    Color = 0xFF3498DB,                               // Xamarin light blue text
    Style = SKPaintStyle.Fill,                        // solid text
    Typeface = SKTypeface.FromFamilyName("Trebuchet") // use the Trebuchet typeface
};

canvas.Clear(SKColors.Transparent);

canvas.DrawText("SkiaSharp", 128, 128 + (paint.TextSize / 2), paint);

bitmap

#!csharp

using SkiaSharp;
using System.IO;
using Microsoft.DotNet.Interactive.Formatting;

public byte[] CreateKeySignatureImage(int width, int height, int sharps, int flats)
{
    var info = new SKImageInfo(width, height);
    using var surface = SKSurface.Create(info);
    var canvas = surface.Canvas;
    canvas.Clear(SKColors.White);

    // Your drawing code here, e.g., DrawKeySignature(canvas, 10, 10, sharps, flats);

    using var image = surface.Snapshot();
    using var data = image.Encode(SKEncodedImageFormat.Png, 100);
    using var ms = new MemoryStream();
    data.SaveTo(ms);
    return ms.ToArray();
}

var imageBytes = CreateKeySignatureImage(300, 100, 2, 0); // Example usage
var base64Image = Convert.ToBase64String(imageBytes);

var htmlContent = $"<img src='data:image/png;base64,{base64Image}' />";
Formatter.Register<MemoryStream>((stream, writer) =>
{
    writer.Write(htmlContent);
}, "text/html");

display(htmlContent, "text/html");
