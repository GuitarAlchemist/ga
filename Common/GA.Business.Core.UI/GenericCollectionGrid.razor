@using GA.Core.UI.Components.Grids
@using GA.Core.UI.Dtos
@using System.Reflection
@using System.Collections.Immutable

@typeparam T where T : GA.Core.Collections.IStaticReadonlyCollection<T>

<div style="height: 90vh; width: 100%">
    <TabularDataGrid @ref="_grid"></TabularDataGrid>
</div>

@code {
    private TabularDataGrid? _grid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender) await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        if (_grid == null) return;

        var tabularData = GetTabularData();
        await _grid.LoadAsync(tabularData);

        static TabularData GetTabularData()
        {
            var properties = typeof(T)
                .GetProperties(BindingFlags.Instance | BindingFlags.Public)
                .Where(property => property.PropertyType.ToString().StartsWith("System"))
                .ToImmutableList();
            var columns =
                properties
                    .Select(prop => new PropertyTabularDataColumn(prop))
                    .ToImmutableList();
            var data = new TabularData(columns, GetRows(properties));
            return data;

            static IEnumerable<TabularDataRow> GetRows(IReadOnlyCollection<PropertyInfo> properties) =>
                T.Items.Select(obj =>
                {
                    var row = new TabularDataRow();
                    foreach (var property in properties)
                    {
                        row.Add(
                            property.Name,
                            property.GetValue(obj));
                    }
                    return row;
                });
        }
    }



}