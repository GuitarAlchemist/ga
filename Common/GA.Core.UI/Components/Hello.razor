@using GA.Core.Extensions

<div @ref="_element" 
     style="height: 100%; width: 100%">
</div>

@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

@code {
    private ElementReference? _element;

    private Lazy<Task<IJSObjectReference>> _jsModuleTask = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _jsModuleTask = new(() => JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/GA.Core.UI/js/modules/hello.js").AsTask());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await InitAsync();
        }
    }

    private async Task InitAsync()
    {
        if (string.IsNullOrEmpty(_element?.Id)) throw new InvalidOperationException();

        try
        {
            //await _jsModule.InvokeVoidAsync("init", _element);
            await HelloAlert();
        }
        catch (Exception ex)
        {
            var msg = ex.GetMessageAndStackTrace("Failed initializing");
            await JsRuntime.LogAsync(msg);
            throw;
        }
    }

    private async Task HelloAlert()
    {
        var jsModule = await _jsModuleTask.Value;
        await jsModule.InvokeVoidAsync("hello");
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModuleTask.IsValueCreated)
        {
            var jsModule = await _jsModuleTask.Value;
            await jsModule.DisposeAsync();
        }
    }

}
